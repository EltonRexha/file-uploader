generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  firstName     String          @map("first_name")
  lastName      String          @map("last_name")
  role          Role            @default(USER)
  status        Status          @default(ACTIVE)
  Workspaces    Workspace[]
  activity      Activity[]
  WorkspaceLink WorkspaceLink[]

  @@map("users")
}

model Workspace {
  id            String          @id @default(uuid())
  name          String
  description   String
  user          User            @relation(fields: [userId], references: [id])
  userId        String          @map("user_id")
  views         Int             @default(0)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  folder        Folder[]
  WorkspaceLink WorkspaceLink[]
  Activity      Activity[]

  @@unique([name, userId])
  @@map("workspaces")
}

model WorkspaceLink {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String    @map("workspace_id")
  join_code   String
  userAdmin   User      @relation(fields: [userAdminId], references: [id])
  userAdminId String    @map("user_admin_id")

  @@map("workspace_links")
}

model Folder {
  id             String     @id @default(uuid())
  name           String
  workspace      Workspace  @relation(fields: [workspaceId], references: [id])
  workspaceId    String     @map("workspace_id")
  childFolders   Folder[]   @relation("folders")
  parentFolder   Folder?    @relation("folders", fields: [parentFolderId], references: [id], onDelete: Cascade)
  parentFolderId String?    @map("parent_folder_id")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  path           String
  files          File[]
  Activity       Activity[]

  @@unique([workspaceId, path])
  @@map("folders")
}

model File {
  id        String     @id @default(uuid())
  hashName  String
  name      String
  mimeType  String     @map("mime_type")
  byte_size Int
  path      String
  folder    Folder     @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String     @map("folder_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Activity  Activity[]

  @@unique([path, folderId])
  @@map("files")
}

model Activity {
  id          String       @id @default(uuid())
  activity    ActivityType
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  folder      Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  file        File?        @relation(fields: [fileId], references: [id], onDelete: SetNull)
  userId      String       @map("user_id")
  workspaceId String       @map("workspace_id")
  folderId    String?      @map("folder_id")
  fileId      String?      @map("file_id")

  @@map("activities")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

enum ActivityType {
  DOWNLOAD
  UPLOAD
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  BANNED
}
